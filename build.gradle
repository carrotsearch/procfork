
plugins {
  id 'com.moowork.node' version '1.3.1' apply false
  id 'com.diffplug.gradle.spotless' version "3.23.0" apply false
  id "com.github.ben-manes.versions" version "0.21.0"
  id "com.palantir.consistent-versions" version "1.8.0"
}

apply from: file('gradle/min-gradle-version.gradle')
apply from: file('gradle/gitinfo.gradle')
apply from: file('gradle/buildinfo.gradle')

apply plugin: 'base'

def currentVersion = '1.0.0-SNAPSHOT'

ext {
  gitRev = gitStatus.id

  licenseHeader = file('etc/license-header.txt')

  replaceTokens = [
    'version': currentVersion,
    'gitRev': gitRev,
    'buildDate': buildDate,
    'buildDateTrimmed': buildDateTrimmed
  ]

  isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea')
}

allprojects {
  apply plugin: 'idea'

  version = currentVersion

  repositories {
    mavenCentral()
  }

  idea {
    module {
      outputDir file('build/idea/classes/main')
      testOutputDir file('build/idea/classes/test')
      downloadSources = true
    }
  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'com.diffplug.gradle.spotless'

  sourceCompatibility = 1.9
  targetCompatibility = 1.9

  dependencies {
    testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner"
  }

  spotless {
    java {
      licenseHeaderFile licenseHeader
      lineEndings 'UNIX'
      endWithNewline()
      googleJavaFormat('1.7')
    }
  }

  test {
    maxParallelForks = (int) Math.max(Runtime.runtime.availableProcessors() / 2.0, 4.0)
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = "UTF-8"
  }

  tasks.withType(Jar) {
    manifest {
      attributes("Implementation-Title": project.name,
                 "Implementation-Version": "${project.version} (${gitRev}, ${buildDateTrimmed})")
    }
  }

  javadoc {
    title = "${project.name} ${project.version} API Documentation"

    if (JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption('html5', true)
      options.addStringOption('Xdoclint:all,-missing', '-noindex')
    }

    options.encoding = 'UTF-8'
  }

  afterEvaluate {
    check.dependsOn(spotlessCheck)
    precommit.dependsOn(spotlessCheck)

    tasks.withType(AbstractArchiveTask) {
      duplicatesStrategy = 'fail'
    }
  }
}

task precommit {
  description "Runs code quality and other precommit checks"
  group "Verification"
}
